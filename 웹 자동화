# XPath
    html문서에서 특정한 엘리먼트를 찾는 경로
    (전체경로, 특징을 이용한 경로)

    검사(F12) -> 찾는 부분 우클릭 -> copy -> copy XPath(or copy full XPath)
    
    ex)
    /html/body/div/div/div/div/span/a...   전체경로
    //*[@id="login"]     전체에서 id가 login인 것을 찾음

# 크롬
  검사창에서 원하는 html코드 보는 법(F12)
    1. 웹 페이지에서 찾을 부분 우클릭해서 검사창 확인
    2. 오른쪽 위의 점 세게 아이콘 클릭 -> 도구 더보기 -> 개발자 도구
      - 검사부분에서 왼쪽위의 화살표 누르고 찾을부분 눌러도 됨

# Selenium 기본(1)
    pip install selenium
    설치돼있는 크롬버전과 호환되는 크롬 드라이버를 설치해야 됨
    크롬버전 확인하는 법: chrome://version
                        오른쪽 위의 점 세게 아이콘 클릭 -> 도움말 -> Chrome 정보
    chromedriver 검색 -> 맨 위에 들어가서 버전 앞 숫자 두자리 같은것으로 다운로드
    
    from selenium import webdriver
    browser = webdriver.Chrome()
    browser.get("http://daum.net")      # 이런 식으로 사용
    
  * 터미널에서 실습
    from selenium import webdriver
    browser = webdriver.Chrome()            # 빈 크롬창이 띄워짐
    browser.get("http://naver.com")         # 네이버로 들어감
    elem = browser.find_element_by_link_text("카페")  # 카페라는 텍스트 링크를 찾음   # 검사창을 통해서 비교하며 확인
    elem.get_attribute("href")                        # 카페의 링크를 확인            ←
    elem.get_attribute("class")                       # 카페의 클래스를 확인          ←
    elem.click()                            # 카페 클릭
    browser.back()                          # 뒤로 가기
    browser.forward()                       # 앞으로 가기
    browser.refresh()                       # 새로고침
    elem = browser.find_element_by_id("query")      # 검사창 통해 검색창의 id를 확인해서 'elem'에 속성 부여
    elem                                            # 제대로 됐는지 확인
    elem.send_keys("나도코딩")                      # 검색창에 글자를 적음
    from selenium.webdriver.common.keys import Keys # 앤터 키를 사용하려면 필요
    elem.send_keys(Keys.ENTER)                      # 앤터 누름

# Selenium 기본(2)
    elem = browser.find_element_by_tag_name("a")    # 처음 나오는 'a'태그에 해당하는 앨리먼트를 가져옴
    elem.get_attribute("href")                      # 페이지에서 처음 나오는 'a'태그의 링크를 가져옴
    elems = browser.find_elements_by_tag_name("a")  # 모든 'a'태그를 가져옴
    elems                                           # 엄청 많은 'a'태그들이 있는걸 보여줌
    >>> for e in elems:                             # 'a'태그들 각각의 링크들이 나옴
    ...     e.get_attribute("href")                 # 탭 한번 누르고 쓰고 앤터 두번 눌러야 됨
    browser.get("http://daum.net")                  # '다음' 사이트로 옮겨감
    elem = browser.find_element_by_name("q")        # 검사를 통해 검색창에 'name' 속성이 있는것을 확인하고 'elem'에 넣어줌
    elem.send_keys("나도코딩")                       # '나도코딩' 을 입력함(검색창을 잘 가져왔음을 확인)
    elem.send_keys("나도코딩")                       # 또 입력하면 뒤에 붙혀서 적히게 됨(지우고 적어야 함)
    elem.clear()                                    # 글자를 다 지워줌
    elem.send_keys("나도코딩")
    elem = browser.find_element_by_xpath('//*[@id="daumSearch"]/fieldset/div/div/button[2]')
    # 검사창을 통해 검색버튼의 xpath를 복사하여 작은 따옴표 안에 붙혀넣음(안에 이미 큰 따옴표가 있기 때문)
    elem.click()                                    # 검색키를 누름
    browser.save_screenshot('daum.png')             # 스크린샷 찍음
    browser.page_source                             # 페이지 소스를 확인
    browser.close()                                 # 현재 탭 닫기
    browser.quit()                                  # 브라우저 전체 닫기
  * 구글 검색창에 'selenium with python' 검색하고 맨 위에 있는거 들어가서 왼쪽에 'Locating Elements' 들어가면 공부했던것들 나와있음

# Iframe
  * 실패
    import time
    from selenium import webdriver
    browser = webdriver.Chrome()
    browser.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_input_type_radio')  # w3shool radiobutton (try it yourself) 사이트
    elem = browser.find_element_by_xpath('//*[@id="male"]') # male 경로
    elem.click()    # male 클릭
    time.sleep(5)   # 5초 대기
    browser.quit()  # 브라우저 종료
    # 오류가 발생함: iframe 안에 들어 있어서 찾을 수가 없음
  * 성공
    import time
    from selenium import webdriver
    browser = webdriver.Chrome()
    browser.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_input_type_radio')
    browser.switch_to_frame('iframeResult')                     # frame 전환 (iframe의 id를 복사해서 가져옴)
    elem = browser.find_element_by_xpath('//*[@id="male"]')
    elem.click()
    browser.switch_to_default_content()                         # 상위(frame 밖)로 빠져 나옴
    time.sleep(5)   # 5초 대기
    browser.quit()

# Radio(라디오 버튼: 하나만 선택할 수있는 버튼)
    import time
    from selenium import webdriver

    browser = webdriver.Chrome()
    browser.maximize_window()   # 창 최대화
    browser.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_input_type_radio')
    browser.switch_to_frame('iframeResult')         # frame 전환(iframe의 id를 복사해서 가져옴)
    elem = browser.find_element_by_xpath('//*[@id="male"]')

    # 선택이 안되어 있으면 선택하기
    if elem.is_selected() == False:     # 라디오 버튼이 선택되어 있지 않으면
        print("선택 안되어 있으므로 선택하기")
        elem.click()
    else:   # 라디오 버튼이 선택되어 있다면
        print("선택 되어 있으므로 아무것도 안함")

    time.sleep(5)   # 5초 대기

    # 선택이 안되어 있으면 선택하기
    if elem.is_selected() == False:     # 라디오 버튼이 선택되어 있지 않으면
        print("선택 안되어 있으므로 선택하기")
        elem.click()
    else:   # 라디오 버튼이 선택되어 있다면
        print("선택 되어 있으므로 아무것도 안함")

    browser.quit()
    ## 선택 안되어 있는경우는 확인 안해도 되는거긴 함(어차피 하나 누르면 나머지는 체크해제가 되므로) ##

# CheckBox    
    import time
    from selenium import webdriver
    from selenium.webdriver.common.by import By

    browser = webdriver.Chrome()
    browser.maximize_window()
    browser.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_input_type_checkbox')   # w3shool checkbox (try it yourself) 사이트
    browser.switch_to_frame('iframeResult')

    # elem = browser.find_element_by_xpath('//*[@id="vehicle1"]')
    # elem = browser.find_element(By.XPATH, '//*[@id="vehicle1"]')
    elem = browser.find_element(By.ID, 'vehicle1')  # 위의 두개랑 똑같이 작동함(편한 것으로 사용하면 됨)

    time.sleep(5)

    if elem.is_selected() == False:
        print("선택 안되어 있으므로 선택")
        elem.click()
    else:
        print("선택 되어 있으므로 아무것도 안함")

    time.sleep(5)
    browser.quit()

# Select & Option
  * 기본코드
    import time
    from selenium import webdriver

    browser = webdriver.Chrome()
    browser.maximize_window()
    browser.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_option') # w3shool html option (try it yourself) 사이트
  
  * 1번째 방법
    browser.switch_to.frame('iframeResult')
    # cars 에 해당하는 element 를 찾고, 드롭다운 내부에 있는 4번째 옵션을 선택
    elem = browser.find_element_by_xpath('//*[@id="cars"]/option[4]')
    # option[1] : 첫번째 항목
    # option[2] : 두번째 항목
    # ...
    elem.click()
  
  * 2번째 방법
    # 텍스트 값을 통해서 선택하는 방법
    # 옵션 중에서 텍스트가 Audi 인 항목을 선택
    elem = browser.find_element_by_xpath('//*[@id="cars"]/option[text()="Audi"]')
    elem.click()

  * 3번째 방법
    # 텍스트 값이 부분 일치하는 항목 선택하는 방법
    elem = browser.find_element_by_xpath('//*[@id="cars"]/option[contains(text(),"Au")]')
    elem.click()
    
  * 기본코드
    time.sleep(5)
    browser.quit()

# 동적 페이지 스크롤(1)
    네이버에 '네이버쇼핑'검색 -> 물건 검색하고 스크롤 내리면 스크롤 크기가 작아지면서 제품이 더 나타남
    
    import time
    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys

    browser = webdriver.Chrome()
    browser.maximize_window()

    browser.get('https://shopping.naver.com/home/p/index.nhn')

    # '무선마우스' 입력
    elem = browser.find_element_by_xpath('//*[@id="autocompleteWrapper"]/input[1]')
    elem.send_keys('무선마우스')
    # browser.find_element_by_xpath('//*[@id="autocompleteWrapper"]/input[1]').send_keys('무선마우스')   # elem을 따로 안 만들고 이렇게도 가능함

    time.sleep(1)   # 바로 검색버튼 누르면 클릭이 안돼서

    elem.send_keys(Keys.ENTER)  # Enter 클릭
    # browser.find_element_by_xpath('//*[@id="autocompleteWrapper"]/a[2]').click()   # elem을 따로 안 만들고 이렇게도 가능함
    
    # 스크롤
    # 지정한 위치로 스크롤 내리기
    # 모니터(해상도) 높이인 1080 위치로 스크롤 내리기
    browser.execute_script('window.scrollTo(0,1080)') # 1920*1080(모니터 해상도)
    browser.execute_script('window.scrollTo(0,2080)')

    # 화면 가장 아래로 스크롤 내리기
    browser.execute_script('window.scrollTo(0, document.body.scrollHeight)')

    time.sleep(5)

    browser.quit()

# 동적 페이지 스크롤(2)
    # 동적 페이지에 대해서 마지막까지 스크롤 반복 수행
    interval = 2    # 2초에 한번씩 스크롤 내리기

    # 현재 문서 높이르 가져와서 저장
    prev_height = browser.execute_script('return document.body.scrollHeight')

    # 반복 수행
    while True:
        # 스크롤을 화면 가장 아래로 내림
        browser.execute_script('window.scrollTo(0, document.body.scrollHeight)')

        # 페이지 로딩 대기 (2초)
        time.sleep(interval)

        # 현재 문서 높이 가져와서 저장
        curr_height = browser.execute_script('return document.body.scrollHeight')
        if curr_height == prev_height:  # 높이 변화가 없으면
            break   # 반복문 탈출(모든 스크롤 동작 완료)

        prev_height = curr_height

    # 맨 위로 올리기
    browser.execute_script('window.scrollTo(0,0)')

    time.sleep(5)
    browser.quit()

# 특정 역역 스크롤
  * 기본코드
    import time
    from selenium import webdriver
    from selenium.webdriver.common.action_chains import ActionChains

    browser = webdriver.Chrome()
    browser.get('https://www.w3schools.com/html/')
    browser.maximize_window()

    time.sleep(5)

    # 특정 영역 스크롤
    elem = browser.find_element_by_xpath('//*[@id="leftmenuinnerinner"]/a[61]')

  * 방법 1 : ActionChain  # 맨 밑에 보이게끔만 스크롤이 움직임
    actions = ActionChains(browser)
    actions.move_to_element(elem).perform()
    
  * 방법 2 : 좌표 정보 이용(좌표정보를 주다보니까 스크롤이 알아서 이동함)   # 중간에 보임
    xy = elem.location_once_scrolled_into_view  # 함수가 아니니까 () 안씀
    print("type : ", type(xy))  # dict
    print("value : ", xy)       # 'x': 0, 'y': 481

    elem.click()    # 스크롤 조절 안해도 안보이는 곳의 클릭을 알아서 하긴 함

    time.sleep(5)
    browser.quit()

# 파일 다운로드
    import time
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options

    chrome_options = Options()
    chrome_options.add_experimental_option('prefs', {'download.default_directory': r'D:\rpa_basic\3_web'})  # 다운로드 기본위치 정의

    browser = webdriver.Chrome(options=chrome_options)  # 다운로드 위치 적용
    browser.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_a_download')    # w3school download attribute (try it yourself) 사이트

    browser.switch_to.frame('iframeResult')

    # download의 링크를 클릭
    elem = browser.find_element_by_xpath('/html/body/p[2]/a')
    elem.click()

    time.sleep(5)
    browser.quit()

# 페이지 로딩 대기(1~2)
    import time
    from selenium import webdriver

    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC    # 기니깐 EC 라고 이름지음

    browser = webdriver.Chrome()
    browser.maximize_window()
    browser.get('https://flight.naver.com/flights/')        # 네이버 항공권 사이트

    # 가는 날 클릭
    browser.find_element_by_link_text('가는날 선택').click()
    browser.find_elements_by_link_text('30')[0].click()     # '30' 이란 숫자가 중복될 때 첫번째꺼 클릭(이번달)
    # 오늘 날      # 둘다 30일로 하려면 밑에도 '30'[0] 으로 해야함
    browser.find_elements_by_link_text('5')[1].click()      # '5' 라는 숫자가 중복될 때 두번째꺼 클릭(다음달)

    # 제주도 클릭
    browser.find_element_by_xpath('//*[@id="recommendationList"]/ul/li[1]/div/span').click()

    # 항공권 검색 클릭
    browser.find_element_by_partial_link_text('항공권 검색').click()

    # time.sleep(10)    # 결과 기다리기 -> 비효율적임

    try:    # 브라우저를 기다린다.# 10초동안      #원하는 엘리먼트가 위치 할때까지   # xpath 기준으로 이 코드에 해당하는    #튜플형태임
        elem = WebDriverWait(browser, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="content"]/div[2]/div/div[4]/ul/li[1]')))
        # 10초 안에 결과가 나오면 바로 넘어감
        print(elem.text)
    except:
        print("실패했어요")

    # 첫 번째 결과 출력(실패: 원하는 정보가 아직 로딩이 돼어있지 않아서 대기시간이 필요함↑↑↑)
    # elem = browser.find_element_by_xpath('//*[@id="content"]/div[2]/div/div[4]/ul/li[1]')
    # print(elem.text)    # element 내에 있는 text 부분을 출력

    time.sleep(5)
    browser.quit()
# Handle
    import time
    from selenium import webdriver

    browser = webdriver.Chrome()
    browser.maximize_window()

    browser.get('https://www.w3schools.com/tags/att_input_type_radio.asp')  # w3shool radiobutton 사이트(try it yourself: X)
    curr_handle = browser.current_window_handle
    print(curr_handle)  # 현재 윈도우 핸들 정보

    # Try it yourself
    browser.find_element_by_xpath('//*[@id="main"]/div[2]/a').click()

    handles = browser.window_handles    # 모든 핸들 정보
    for handle in handles:
        print(handle)   # 각 핸들 정보
        browser.switch_to_window(handle)    # 각 핸들로 이동해서
        print(browser.title)    # 출력해보면 현재 핸들 (브라우저)의 제목 표시
        print()

    # 새로 이동된 브라우저에서 뭔가 자동화 작업을 수행...

    # 그 브라우저를 종료
    print("현재 핸들 닫기")
    browser.close()

    # 이전 핸들로 돌아오기
    print("처음 핸들로 돌아오기")
    browser.switch_to_window(curr_handle)

    print(browser.title)    # HTML input type="radio"

    # 브라우저 컨트롤이 가능한지 확인
    time.sleep(5)
    browser.get('http://daum.net')

    time.sleep(5)
    browser.quit()

# 퀴즈
    # Quiz) Selenium 을 이용하여 아래 업무를 자동으로 수행하는 프로그램을 작성하시오.

    # 1. https://www.w3schools.com 접속 (URL 은 구글에서 w3schools 검색)
    # 2. 화면 중간 LEARN HTML 클릭
    # 3. 상단 메뉴 중 HOW TO 클릭
    # 4. 좌측 메뉴 중 Contact Form 메뉴 클릭
    # 5. 입력란에 아래 값 입력
    #     First Name : 나도
    #     Last Name : 코딩
    #     Country : Canada
    #     Subject : 퀴즈 완료하였습니다.
    #     ※ 위 값들은 변수로 미리 저장해두세요
    # 6. 5초 대기 후 Submit 버튼 클릭
    # 7. 5초 대기 후 브라우저 종료
    #------------------------------------------------------
    import time
    from selenium import webdriver

    browser = webdriver.Chrome()
    browser.maximize_window()

    # url 접속
    browser.get('https://www.w3schools.com/')

    # LEARN HTML 클릭
    browser.find_element_by_xpath('//*[@id="main"]/div[1]/div[1]/a[1]').click()

    # HOW TO 클릭
    browser.find_element_by_xpath('//*[@id="topnav"]/div/div[1]/a[10]').click()

    # Contact Form 메뉴 클릭
    # 같은 이름이 있을 수 있음
    # browser.find_element_by_link_text('Contact Form').click()
    # 순서가 바뀔 수 있음
    # browser.find_element_by_xpath('//*[@id="leftmenuinnerinner"]/a[116]').click()
    # 가장 좋은 방법
    browser.find_element_by_xpath('//*[@id="leftmenuinnerinner"]/a[text()="Contact Form"]').click()

    # 변수 생성
    first_name= "나도"
    last_name = "코딩"
    country = "Canada"
    subject = "퀴즈 완료하였습니다."

    # 입력란에 입력
    browser.find_element_by_xpath('//*[@id="fname"]').send_keys(first_name)
    browser.find_element_by_xpath('//*[@id="lname"]').send_keys(last_name)
    browser.find_element_by_xpath('//*[@id="country"]/option[text()="{}"]'.format(country)).click()
    browser.find_element_by_xpath('//*[@id="main"]/div[3]/textarea').send_keys(subject)

    # 5초 대기 후 Submit 버튼 클릭
    time.sleep(5)
    browser.find_element_by_xpath('//*[@id="main"]/div[3]/a').click()

    # 5초 대기 후 브라우저 종료
    time.sleep(5)
    browser.quit()
