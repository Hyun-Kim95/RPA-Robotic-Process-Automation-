# 환경설정
  설치: pip install pyautogui
  설치됐는지 확인: 
      import pyautogui

      size = pyautogui.size() # 현재 화면의 스크린 사이즈를 가져옴
      print(size)             # 가로, 세로 크기를 알 수 있음
      # size[0]: width
      # size[1]: height

# 마우스 이동
  # 절대 좌표로 마우스 이동
    pyautogui.moveTo(200,100)                # 지정한 위치(가로 x, 세로 y)로 마우스를 이동
    pyautogui.moveTo(100,200, duration=5)    # 5초 동안 100,200 위치로 이동

  # 상대 좌표로 마우스 이동(현재 커서가 있는 위치로부터)
    pyautogui.moveTo(100,100, duration=0.25)  # 절대
    pyautogui.move(100,100, duration=0.25)    # 상대
    pyautogui.move(100,100, duration=0.25)    # 상대

   # 포인터 위치 얻는 방법
    print(pyautogui.position())   # point(x, y)
    p = pyautogui.position()
    print(p[0], p[1])             # x, y
    print(p.x, p.y)               # x, y

# 마우스 액션
    pyautogui.sleep(3)  # 3초 대기
    
    pyautogui.click(1017, 19, duration=1)   # 1초 동안 (1017,19) 좌표를 마우스 클릭
    pyautogui.click()
    pyautogui.mouseDown()
    pyautogui.mouseUp()
    
    pyautogui.doubleClick()
    pyautogui.click(clicks=500) # 500번 클릭
    
    pyautogui.moveTo(200,200)
    pyautogui.mouseDown()   # 마우스 버튼 누른 상태
    pyautogui.moveTo(300,300)
    pyautogui.mouseUp()     # 마우스 버튼 뗀 상태
    
    pyautogui.rightClick()
    pyautogui.middleClick()
    
    pyautogui.moveTo(734,735)
    pyautogui.drag(100,0)   # 현재 위치 기준으로 x 100 만큼, y 0 만큼 드래그
    pyautogui.drag(100,0, duration=0.25)    # 너무 빠른 동작으로 drag 수행이 안될때는 duration 값 설정
    pyautogui.dragTo(1134,735, duration=0.25)  # 절대 좌표 기준으로 x 1134, y 735 로 드래그

    pyautogui.scroll(800)   # 양수이면 위 방향으로, 음수이면 아래 방향으로 800만큼 스크롤

# 마우스 정보
    pyautogui.mouseInfo()   #원하는 자리에서 F1을 누르고 3초 기다리면 좌표, rgb컬러가 복사됨
    # 붙혀넣기 결과: 1022,10 144,144,145 #909091
    
    pyautogui.PAUSE = 1     # 모든 동작에 1초씩 sleep 적용
    
    for i in range(5):     # fail-safe : 멈추고 싶을때 귀퉁이로 마우스 옮기면 멈추는 기본기능
    pyautogui.move(100,100)
    pyautogui.FAILSAFE = False  # fail-safe를 사용하지 않겠다는 의미임(비추)

# 스크린
  스크린 샷 찍기
    img = pyautogui.screenshot()
    img.save("screenshot.png")  # 파일로 저장
    
  마우스 위치가 정말 맞는지 확인
    # pyautogui.mouseInfo()   # 983,16 34,166,241 #22A6F1     # 원하는 마우스 위치 확인
    pixel = pyautogui.pixel(983, 16)
    print(pixel)                                              # rgb 값이 나옴 (34,166,241)
    print(pyautogui.pixelMatchesColor(983, 16, (34,166,241))) # True
    print(pyautogui.pixelMatchesColor(983, 16, (pixel)))      # True
    print(pyautogui.pixelMatchesColor(983, 16, (34,166,242))) # False

# 이미지 처리 - 기본
    file_menu = pyautogui.locateOnScreen("file_menu.png") # 이미지 찾기(중복이 있어도 처음 찾아지는것만 찾고 끝)
    print(file_menu)                                      # Box(left=999, top=8, width=39, height=16) 위치와 크기를 나타냄
    pyautogui.click(file_menu)                            # 찾은 위치를 클릭
    
    screen = pyautogui.locateOnScreen("screenshot.png")
    print(screen)                                         # 찾을 수 없으면 None
    
    for i in pyautogui.locateAllOnScreen("checkbox.png"): # 중복된 값을 모두 찾을 때에 사용
      print(i)                                            # 위치정보 반환
      pyautogui.click(i, duration=0.25)                   # 찾은것을 다 클릭

# 이미지 처리 - 속도 개선
  1. GrayScale(정확도는 조금 떨어질 수 있음)
    trash_icon = pyautogui.locateOnScreen("trash_icon.png", grayscale=True) # 화면을 흑백으로 바꾼 후 찾음
    pyautogui.moveTo(trash_icon)

  2. 범위 지정
    trash_icon = pyautogui.locateOnScreen("trash_icon.png", region=(1539,784,1893-1539,873-784))
    pyautogui.moveTo(trash_icon)
    # pyautogui.mouseInfo() # 찾은 값: 1539,784(근처 왼쪽 위) / 1893,873(근처 오른쪽 아래)

  3. 정확도 조정 # pip install opencv-python 설치
    run_btn = pyautogui.locateOnScreen("run_btn.png", confidence=0.9)   # 90%일치(기본값은0.999)
    pyautogui.moveTo(run_btn)

# 이미지 처리 - 대기
  1. 계속 기다리기
    file_menu_notepad = pyautogui.locateOnScreen("file_menu_notepad.png")
    if file_menu_notepad:
        pyautogui.click(file_menu_notepad)
    else:
        print("발견 실패")
        
    while file_menu_notepad is None:
        file_menu_notepad = pyautogui.locateOnScreen("file_menu_notepad.png")
        print("발견 실패")

    pyautogui.click(file_menu_notepad)

  2. 일정 시간동안 기다리기 (TimeOut)
    import time
    import sys

    timeout = 10          # 10초 대기
    start = time.time()   # 시작 시간 설정(UTC)
    file_menu_notepad = None
    while file_menu_notepad is None:
        file_menu_notepad = pyautogui.locateOnScreen("file_menu_notepad.png")
        end = time.time()           # 종료 시간 설정
        if end - start > timeout:   # 지정한 10초를 초과하면
            print("시간 종료")
            sys.exit()              # 프로그램을 종료
    pyautogui.click(file_menu_notepad)

  * 함수화 시키기
    import time
    import sys
    
    def find_target(img_file, timeout=30):
        start = time.time()
        target = None
        while target is None:
            target = pyautogui.locateOnScreen(img_file)
            end = time.time()
            if end - start > timeout:
                break
        return target

    def my_click(img_file, timeout=30):
        target = find_target(img_file, timeout)
        if target:
            pyautogui.click(target)
        else:
            print(f"[Timeout {timeout}s] Target not found ({img_file}). Terminate program.")
            sys.exit()

    my_click("file_menu_notepad.png", 10)

# 윈도우 다루기
    fw = pyautogui.getActiveWindow()    # 현재 활성화된 창 (VScode)
    print(fw.title)                     # 창의 제목 정보
    print(fw.size)                      # 창의 크기 정보(width, height)
    print(fw.left, fw.top, fw.right, fw.bottom) # 창의 좌표 정보
    pyautogui.click(fw.left + 25, fw.top + 20)  # 창의 좌표를 기준으로 가능

    for w in pyautogui.getAllWindows():                  # 실행중인 모든 윈도우 가져오기
        print(w)

    for w in pyautogui.getWindowsWithTitle("제목 없음"):  # 특정 이름을 가진것들 가져오기
        print(w)

    w = pyautogui.getWindowsWithTitle("제목 없음")[0]     # 특정 이름을 가진것들 중에 처음꺼 가져오기
    print(w)
    if w.isActive == False:     # 현재 활성화가 되지 않았다면
        w.activate()            #활성화 (맨 앞으로 가져오기)

    if w.isMaximized == False:  # 현재 최대화가 되지 않았다면
        w.maximize()            # 최대화

    pyautogui.sleep(1)          # 1초 쉼

    # if w.isMinimized == False:  # 현재 최소화가 되지 않았다면
    #     w.minimize()            # 최소화

    w.restore() # 화면 원복

    w.close()   # 윈도우 닫기

# 키보드
    w = pyautogui.getWindowsWithTitle("제목 없음")[0]   # 메모장 1개 띄운 상태에서 가져옴
    w.activate()
    
    pyautogui.write("12345")                        # 메모장에 적어줌
    pyautogui.write("NadoCoding", interval=0.25)    # 적는 속도
    pyautogui.write("나도코딩")                      # 한글은 안됨

    pyautogui.write(["t","e","s","t","left","left","right","1","a","enter"],interval=0.25)
    # t e s t 순서대로 적고 왼쪽 방향키 2번, 오른쪽 방향키 1번, 1 a 순서대로 적고 엔터입력
    # 구글에 'automate the boring stuff with python'검색 -> 밑에 chapter20 클릭 -> (Ctrl+F) 'keyboard Attributes' 검색
      -> 여기서 필요한 키보드키를 보고 사용하면 됨

  특수 문자
    # shift 4 -> $
    pyautogui.keyDown("shift")  # shift 키를 누른 상태에서
    pyautogui.press("4")        # 숫자 4를 입력하고
    pyautogui.keyUp("shift")    # shift 키를 땐다

  간편한 조합키
    # 예제) pyautogui.hotkey("ctrl","alt","shift","a")
    # 결과) Ctrl 누름->Alt 누름->Shift 누름->a 누름->a 땜->Shift 땜->Alt 땜->Ctrl 땜

  한글 입력하는 법
    # pip install pyperclip
    import pyperclip
    pyperclip.copy("나도코딩")       # "나도코딩" 글자를 클립보드에 저장
    pyautogui.hotkey("ctrl","v")    # 클립보드에 있는 내용을 붙혀넣기

  함수화
    def my_write(text):
        pyperclip.copy(text)
        pyautogui.hotkey("ctrl","v")

    my_write("나도코딩")

  * 자동화 프로그램 종료
    win : ctrl + alt + del
    mac : cmd + shift + option + q

# 메시지 박스
    print("곧 시작합니다...")
    pyautogui.countdown(3)  # 카운트다운
    print("자동화 시작")

    pyautogui.alert("자동화 수행에 실패하였습니다.", "경고")             # 확인버튼만 있는 팝업   # (내용,제목)
    result = pyautogui.confirm("계속 진행하시겠습니까?", "확인")        # 확인, 취소 버튼
    print(result)   # 확인 누르면 OK, 취소 누르면 Cancel
    result = pyautogui.prompt("파일명을 무엇으로 하시계습니까?", "입력") # 사용자 입력
    print(result)   # OK 누르면 입력 값, Cancel 누르면 None
    result = pyautogui.password("암호를 입력하세요")                    # 입력창에 '*' 모양으로 적힘
    print(result)   # OK 누르면 입력 값, Cancel 누르면 None

  * pyautogui에 대해 더 자세히 알고 싶으면
    구글에 'pyautogui' 검색-> 'Welcome to PyAutoGUI's documentation!' 클릭 -> 자세한 설명과 셈플이 있음

# 로그
    import logging                # 시간 [로그레벨] 메시지 형태로 로그를 작성
    logging.basicConfig(level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s")

    # debug < info < warning < error < critical
    logging.debug("아 이거 누가 짠거야")
    logging.info("자동화 수행 준비")
    logging.warning("이 스크립트는 조금 오래 되었습니다. 실행상에 문제가 있을 수 있습니다.")
    logging.error("에러가 발생하였습니다. 에러코드는 ...")
    logging.critical("복구가 불가능한 심각한 문제가 발생했습니다...")

  # 터미널과 파일에 함께 로그 남기기
    import logging
    from datetime import datetime
    # 시간 [로그레벨] 메시지 형태로 로그를 작성
    logFormatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
    logger = logging.getLogger()
    # 로그 레벨 설정
    logger.setLevel(logging.DEBUG)

    # 스트림
      streamHandler = logging.StreamHandler()
      streamHandler.setFormatter(logFormatter)
      logger.addHandler(streamHandler)

    # 파일
      filename = datetime.now().strftime("mylogfile_%Y%m%d%H%M%S.log")  # mylogfile_20210125160607.log
      fileHandler = logging.FileHandler(filename, encoding="utf-8")
      fileHandler.setFormatter(logFormatter)
      logger.addHandler(fileHandler)

      logger.debug("로그를 남겨보는 테스트를 진행합니다.")

# 파일 시스템(1)
    import os
    print(os.getcwd())      # (current working directory) 현재 작업 공간
    os.chdir("/rpa_basic")  # rpa_basic 으로 작업 공간 이동
    print(os.getcwd())
    os.chdir("..")          # 부모 폴더로 이동
    print(os.getcwd())
    os.chdir("../..")       # 조부모 폴더로 이동(더 전으로도 가능)
    print(os.getcwd())
    os.chdir("c:/")         # 주어진 절대 경로로 이동
    print(os.getcwd())

  파일 경로
    file_path = os.path.join(os.getcwd(), "my_file.txt") # 절대 경로 생성
    print(file_path)

  파일 경로에서 폴더 정보 가져오기
    print(os.path.dirname(r"D:\rpa_basic\2_desktop\my_file.txt")) # r: 역슬레시 신경 안씀

  파일 정보 가져오기
    import time
    import datetime

    파일의 생성 날짜(ctime)
      file_path = "/rpa_basic/2_desktop/10_log.py"
      ctime = os.path.getctime(file_path)
      # 날짜 정보를 strftime 을 통해서 년월일 시분초 형태로 출력
      print(datetime.datetime.fromtimestamp(ctime).strftime("%Y%m%d %H:%M:%S"))

    파일의 수정 날짜(mtime)
      mtime = os.path.getmtime(file_path)
      print(datetime.datetime.fromtimestamp(mtime).strftime("%Y%m%d %H:%M:%S"))

    파일의 마지막 접근 날짜(atime)
      atime = os.path.getatime(file_path)
      print(datetime.datetime.fromtimestamp(atime).strftime("%Y%m%d %H:%M:%S"))

    파일 크기
      size = os.path.getsize(file_path)
      print(size) # 바이트 단위로 파일 크기 가져오기

# 파일 시스템(2)
  파일 목록 가져오기(하위 제외)
    print(os.listdir())               # 모든 폴더, 파일 목록 가져오기
    print(os.listdir("/rpa_basic"))   # 주어진 폴더 밑에서 모든 폴더, 파일 목록 가져오기

  파일 목록 가져오기 (하위 폴더 모두 포함)
    result = os.walk("/rpa_basic")  # 주어진 폴더 밑에 있는 모든 폴더, 파일 목록 가져오기
       # "." 으로 바꾸면 ↑↑↑↑ 현재 작업공간의 모든 폴더와 파일을 가져옴
    print(result)   # <generator object _walk at 0x0000011F50D27EB0>
    for root, dirs, files in result:
        print(root, dirs, files)    # 경로, 폴더, 파일 순으로 나옴

  만약 폴더 내에서 특정 파일들을 찾으려면?
    name = "11_file_system.py"
    result = []
    for root, dirs, files in os.walk("."):  # os.walk(os.getcwd())로 하면 전체경로를 알 수 있음
        if name in files:
            result.append(os.path.join(root, name))

    print(result)

  만약 폴더 내에서 특정 패턴을 가진 파일들을 찾으려면?
  # *.xlsx, *.txt, 자동화*.png
    import fnmatch
    pattern = "file*.png"    # file 로 시작해서 .png 로 끝나는 모든 파일
    result = []
    for root, dirs, files in os.walk("."):
        for name in files:
            if fnmatch.fnmatch(name, pattern):     # 이름과 패턴이 일치하면
                result.append(os.path.join(root, name))

    print(result)

# 파일 시스템(3)
  주어진 경로가 파일인지? 폴더인지?
    print(os.path.isdir("/rpa_basic"))       # rpa_basic 은 폴더인가? True
    print(os.path.isfile("/rpa_basic"))      # rpa_basic 은 파일인가? False

    print(os.path.isdir("run_btn.png"))     # False
    print(os.path.isfile("run_btn.png"))    # True

  만약에 지정된 경로에 해당하는 파일 / 폴더가 없다면?
    print(os.path.isfile("run_btnnnnn.png"))    # False

  주어진 경로가 존재하는지?
    if os.path.exists("/rpa_basic"):
        print("파일 또는 폴더가 존재합니다.")
    else:
        print("존재하지 않습니다.")

  파일만들기
    open("new_file.txt", "a").close()   # 빈 파일 생성(이름,쓰기형식)

  파일명 변경하기
    os.rename("new_file.txt", "new_file_rename.txt")  # new_file.txt -> new_file_rename.txt

  파일 삭제하기
    os.remove("new_file_rename.txt")

  폴더 만들기
    os.mkdir("new_folder")                # 현재 경로 기준으로 폴더 생성
    os.mkdir("C:/Netmarble/new_folder")   # 절대 경로 기준으로 폴더 생성
    os.makedirs("new_folders/a/b/c")      # 하위 폴더를 가지는 폴더 생성

  폴더명 변경하기
    os.rename("new_folder","new_folder_rename")

  폴더 지우기
    os.rmdir("new_folder_rename")         # 폴더 안이 비었을 때만 삭제 가능

    import shutil                   # shell utilities
    shutil.rmtree("new_folders")    # 폴더 안이 비어 있지 않아도 완전 삭제 가능
    # 모든 파일이 삭제될 수 있으므로 주의!!!

# 파일 시스템(4)
